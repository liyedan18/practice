package com.leetcode.bfs_dfs.p700.p752;


import java.util.Arrays;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Set;
import java.util.stream.Stream;

/**
 * 752. 打开转盘锁
 *
 * 你有一个带有四个圆形拨轮的转盘锁。每个拨轮都有10个数字： '0', '1', '2', '3', '4', '5', '6', '7', '8', '9' 。
 * 每个拨轮可以自由旋转：例如把 '9' 变为  '0'，'0' 变为 '9' 。每次旋转都只能旋转一个拨轮的一位数字。
 *
 * 锁的初始数字为 '0000' ，一个代表四个拨轮的数字的字符串。
 *
 * 列表 deadends 包含了一组死亡数字，一旦拨轮的数字和列表里的任何一个元素相同，这个锁将会被永久锁定，无法再被旋转。
 *
 * 字符串 target 代表可以解锁的数字，你需要给出最小的旋转次数，如果无论如何不能解锁，返回 -1。
 *
 * 示例 1:
 *
 * 输入：deadends = ["0201","0101","0102","1212","2002"], target = "0202"
 * 输出：6
 * 解释：
 * 可能的移动序列为 "0000" -> "1000" -> "1100" -> "1200" -> "1201" -> "1202" -> "0202"。
 * 注意 "0000" -> "0001" -> "0002" -> "0102" -> "0202" 这样的序列是不能解锁的，
 * 因为当拨动到 "0102" 时这个锁就会被锁定。
 * 示例 2:
 *
 * 输入: deadends = ["8888"], target = "0009"
 * 输出：1
 * 解释：
 * 把最后一位反向旋转一次即可 "0000" -> "0009"。
 * 示例 3:
 *
 * 输入: deadends = ["8887","8889","8878","8898","8788","8988","7888","9888"], target = "8888"
 * 输出：-1
 * 解释：
 * 无法旋转到目标数字且不被锁定。
 * 示例 4:
 *
 * 输入: deadends = ["0000"], target = "8888"
 * 输出：-1
 *  
 *
 * 提示：
 *
 * 死亡列表 deadends 的长度范围为 [1, 500]。
 * 目标数字 target 不会在 deadends 之中。
 * 每个 deadends 和 target 中的字符串的数字会在 10,000 个可能的情况 '0000' 到 '9999' 中产生。
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/open-the-lock
 *
 *
 * 思路：
 *      问题拆解，由简到全（先考虑最简单情况，确定框架然后丰富算法，向目标前进）
 *      BFS的本质：
 *          在一幅图中，找到由起点start到终点target的最短路径
 *
 *      1.先考虑不加限制条件时，就是直接穷举法
 *      2.一次转动一个位置，则有8种方式（正向4种+反向4种）
 *          可能会有重复的情况，则去除重复情况
 *      3.N叉树（图）的层序遍历,找到target就停止
 *          BFS——二叉树层序遍历(队列)——一次while循环遍历一个节点
 *      同111题
 */

public class Solution2 {
    public int openLock(String[] deadends, String target) {

        //将deadends存入set，便于查询
        Set<String> deadSet = new HashSet<>(Arrays.asList(deadends));
        // Arrays.stream(deadends).forEach(str -> deadSet.add(str));
        // deadSet.addAll(Arrays.asList(deadends));

        if (deadSet.contains("0000")) {
            return -1;
        }
        int lockSize = 4;
        //去除重复的情况，保存已经访问的锁
        Set<String> visited = new HashSet<>();
        //最终结果，表示要旋转的次数
        int step = 0;

        //BFS遍历框架
        Queue<String> queue = new LinkedList<>();
        queue.add("0000");
        int levelNodeSize = queue.size();

        // 一次while循环遍历一个节点
        while (!queue.isEmpty()) {
            String cur = queue.poll();
            levelNodeSize--;

            //具体业务：判断当前节点是否满足
            if (deadSet.contains(cur)) {
                //这里要注意判断==0的情况
                if (levelNodeSize == 0) {
                    levelNodeSize = queue.size();
                    /** 层序遍历框架， for循环后更新步数*/
                    step++;
                }
                continue;
            }
            if (target.equals(cur)) {
                return step;
            }

            //把与temp相连的节点（也就是temp经过一次转动后所有结果）都添加到队列
            for (int j = 0; j < lockSize; j++) {

                //上旋
                String upLockStr = switchUpLock(cur, j);
                if (!visited.contains(upLockStr)) {
                    visited.add(upLockStr);
                    queue.offer(upLockStr);
                }

                //下旋
                String downLockStr = switchDownLock(cur, j);
                if (!visited.contains(downLockStr)) {
                    visited.add(downLockStr);
                    queue.offer(downLockStr);
                }

            }

            if (levelNodeSize == 0) {
                levelNodeSize = queue.size();
                /** 层序遍历框架， for循环后更新步数*/
                step++;
            }
        }

        //没有匹配选项
        return -1;
    }

    /**
     * 向上旋转锁i位置后的字符串结果
     */
    private String switchUpLock(String cur, int i) {
        char[] chars = cur.toCharArray();
        if (chars[i] == '9') {
            chars[i] = '0';
        } else {
            chars[i] += 1;
        }
        return new String(chars);
    }

    /**
     * 向下旋转锁i位置后的字符串结果
     */
    private String switchDownLock(String cur, int i) {
        char[] chars = cur.toCharArray();
        if (chars[i] == '0') {
            chars[i] = '9';
        } else {
            chars[i] -= 1;
        }
        return new String(chars);
    }

    public static void main(String[] args) {
        String[] cur1 = new String[]{"6586","6557","0399","3436","1106","4255","1161","7546","2375","5535","7623",
                "0805","7045","8244","1804","1777","5152","7241","4488","3653","7485","9103","2726","4624","8654",
                "1404","9321","5145","4237","5423","9350","3383","8658","2601","2446","1605","6804","1521","0832",
                "5555","6710","3851","6370","0069","7369","6352","4165","4327","9727","1363","9906","9463","8628",
                "5239","0009","2743","0419","4722","7251","5645","5159","4040","1406","5836","0623","9851","2970",
                "0479","1707","5248","0135","8840","9395","1068","9653","4461","6830","7851","7798","3745","1608",
                "2061","5404","3536","3875","3552","8430","0846","5575","2835","1777","5848","5181","8129","2408",
                "3257","9168","3279","4705","9799","1592","7849","4934","1210","0384","3946","5200","3702","4792",
                "1363","0340","4623","9837","0798","2400","0859","3002","1819","2925","8966","7065","3310","1415",
                "9986","7612","1233","9681","6869","5324","4271","1632","2947","8829","9102","9502","4896","2556",
                "4998","7642","8477","4439","8391","7171","2081","5401","0369","4498","1269","2535","7805","6611",
                "1605","1432","6237","5565","9618","2123","5178","3649","8657","6236","6737","1561","1802","1349",
                "9738","6245","7202","8442","7183","5105","7963","0259","5622","3098","0664","7366","1556","5711",
                "9981","4607","2063","7540","1818","7320","8505","1028","6127","1816","8961","7126","4739","4050",
                "7729","5887","4836","1244","2697","3937","9817","2759","9536","0154","7214","5688","1284","5434",
                "7103","2704","6790","3244","8797","3860","1988","1458","4268","1901","4787","7599","6672","3579",
                "3726","6670","1603","3332","7249","0984","6783","4456","0023","2678","0167","8626","6080","5716",
                "5083","6135","8700","7890","8683","2089","0264","2123","0787","3056","2647","4645","8748","6936",
                "6899","0031","4934","0221","9481","9959","1386","7695","2034","0466","0809","9166","6381","6937",
                "0744","8059","8498","5772","8379","4448","5794","7423","2568","4671","6408","4335","1655","3662",
                "1250","5262","7197","6831","8004","0575","8784","2920","0869","7157","0153","7255","1541","1247",
                "5498","0566","6632","7640","1733","2546","5110","2852","8042","8175","0284","8589","8918","5755",
                "2289","0812","4850","4650","9018","6649","5099","6532","9891","8675","1718","5442","6786","8915",
                "3710","3833","2659","7040","3959","2505","7574","1199","3465","4557","7230","9161","5177","7815",
                "4564","1470","8051","6287","2504","4025","8911","6158","6857","8948","7991","3670","3413","0423",
                "7184","7921","1351","8908","1921","1685","5579","4641","0286","6410","2800","7018","1402","7410",
                "3471","1312","9530","4581","5364","4820","8192","3088","4714","2255","2342","5042","8673","9788",
                "2203","0879","2345","9712","2008","0652","0939","0720","2954","4482","2390","0807","4634","6266",
                "5222","6898","7491","0294","1811","0667","8282","5754","1841","9518","9093","7904","4902","0068",
                "5157","7823","8073","8801","8179","1402","9977","2332","9448","2251","8455","6157","1878","4183",
                "3331","8047","1254","9639","2156","5780","7359","0260","9683","6842","1098","6495","2057","6583",
                "0932","2577","1818","6042","8358","1833","5512","4529","0583","9955","9205","6055","3322","2232",
                "5372","5835","2202","9696","1596","3424","3696","5695","1365","6432","0327","1565","8509","6936",
                "3363","3007","3107","0410","6258","2492","0300","1255","1664","8666","6826","9961","5782","0140",
                "5567","9596","1680","1892","5016","8804","4962","9318","4540","5044",
                "0979","2004","4265","7689","0289","3434","6090","1375","3135","3935","5140","9255","3997","3482","8150"
                ,"8164","0787"};
        String cur = "8828";
        Solution2 s = new Solution2();
        System.out.println(s.openLock(cur1, cur));
    }

}
