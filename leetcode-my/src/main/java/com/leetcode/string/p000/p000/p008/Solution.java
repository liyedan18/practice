package com.leetcode.string.p000.p000.p008;

/**
 * 8. 字符串转换整数 (atoi)
 *
 * 请你来实现一个 myAtoi(string s) 函数，使其能将字符串转换成一个 32 位有符号整数（类似 C/C++ 中的 atoi 函数）。
 *
 * 函数 myAtoi(string s) 的算法如下：
 *
 * 读入字符串并丢弃无用的前导空格
 * 检查下一个字符（假设还未到字符末尾）为正还是负号，读取该字符（如果有）。 确定最终结果是负数还是正数。 如果两者都不存在，则假定结果为正。
 * 读入下一个字符，直到到达下一个非数字字符或到达输入的结尾。字符串的其余部分将被忽略。
 * 将前面步骤读入的这些数字转换为整数（即，"123" -> 123， "0032" -> 32）。如果没有读入数字，则整数为 0 。必要时更改符号（从步骤 2 开始）。
 * 如果整数数超过 32 位有符号整数范围 [−231,  231 − 1] ，需要截断这个整数，使其保持在这个范围内。具体来说，小于 −231 的整数应该被固定为 −231 ，大于 231 − 1 的整数应该被固定为 231 − 1 。
 * 返回整数作为最终结果。
 * 注意：
 *
 * 本题中的空白字符只包括空格字符 ' ' 。
 * 除前导空格或数字后的其余字符串外，请勿忽略 任何其他字符。
 *  
 *
 * 示例 1：
 *
 * 输入：s = "42"
 * 输出：42
 * 解释：加粗的字符串为已经读入的字符，插入符号是当前读取的字符。
 * 第 1 步："42"（当前没有读入字符，因为没有前导空格）
 *          ^
 * 第 2 步："42"（当前没有读入字符，因为这里不存在 '-' 或者 '+'）
 *          ^
 * 第 3 步："42"（读入 "42"）
 *            ^
 * 解析得到整数 42 。
 * 由于 "42" 在范围 [-231, 231 - 1] 内，最终结果为 42 。
 * 示例 2：
 *
 * 输入：s = "   -42"
 * 输出：-42
 * 解释：
 * 第 1 步："   -42"（读入前导空格，但忽视掉）
 *             ^
 * 第 2 步："   -42"（读入 '-' 字符，所以结果应该是负数）
 *              ^
 * 第 3 步："   -42"（读入 "42"）
 *                ^
 * 解析得到整数 -42 。
 * 由于 "-42" 在范围 [-231, 231 - 1] 内，最终结果为 -42 。
 *
 * 来源：力扣（LeetCode）
 * 链接：https://leetcode-cn.com/problems/string-to-integer-atoi
 *
 * 思路：
 *      一个一个解析字符，最后判断是否超出范围
 *      丢弃空格
 *      遇到+或者-表示正负号，默认正号。符号后面必须跟数字，否则丢弃
 *      拼接数字时，判断是否超出范围
 *
 */
public class Solution {
    public int myAtoi(String s) {
        //一个一个解析字符，最后判断是否超出范围

        if (s == null || s.length() == 0) {
            return 0;
        }

        int res = 0;
        //true为正号
        boolean sign = true;
        int max = Integer.MAX_VALUE / 10;
        int min = Integer.MIN_VALUE / 10;

        char preC = ' ';
        for (char c : s.toCharArray()) {
            //遇到+或者-表示正负号，默认正号。符号后面必须跟数字，否则丢弃
            if (preC == '+' || preC == '-' || (preC <= '9' && preC >= '0')) {
                if (c > '9' || c < '0') {
                    return sign ? res : -res;
                }
            }
            preC = c;

            //丢弃空格
            if (c == ' ') {
                // continue;
            } else if (c <= '9' && c >= '0') {
                //拼接数字时，判断是否超出范围
                if (c <= '7' && res <= max) {
                    res = res * 10 + (c - '0');
                } else if (sign && res >= max) {
                    return Integer.MAX_VALUE;
                } else if (!sign && -res <= min) {
                    return Integer.MIN_VALUE;
                } else {
                    res = res * 10 + (c - '0');
                }

            } else if (c == '-') {
                sign = false;
            } else if (c != '+') {
                //遇到字母或其他字符
                break;
            }
        }

        return sign ? res : -res;
    }
}
